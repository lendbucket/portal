// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String    @id @default(cuid())
    firstname               String?
    lastname                String?
    middlename              String?
    suffix                  String?
    email                   String?   @unique
    email_verified          DateTime?
    ssn                     String?
    mobile                  String    @unique
    password                String // New field to store hashed passwords
    date_birth              String?
    address1                String
    city                    String
    state                   String
    zipcode                 String
    country                 String
    apt                     String?
    image                   String?
    is_verified             Boolean   @default(false)
    idv_status              String?
    most_recent_idv_session String?
    created_at              DateTime? @default(now())
    updated_at              DateTime? @updatedAt
    accounts                Account[]
    sessions                Session[]
    bills                   Bill[]
    payments                Payment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Bill {
    id                   String    @id @default(cuid())
    userId               String
    original_amount      Decimal  @db.Decimal(10, 2)
    paid_total_amount    Decimal?  @db.Decimal(10, 2)
    pending_total_amount Decimal?  @db.Decimal(10, 2)
    status               String
    description          String?
    created_at           DateTime? @default(now())
    updated_at           DateTime? @updatedAt
    user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
    id              String    @id @default(cuid())
    userId          String
    billId          String
    payment_type    String
    account_id      String?
    plaid_intent_id String?
    amount          Decimal  @db.Decimal(10, 2)
    status          String
    created_at      DateTime? @default(now())
    updated_at      DateTime? @updatedAt
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([billId])
}
